-- MySQL Script generated by MySQL Workbench
-- Fri Apr 23 19:55:06 2021
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema easyinventoryDB
-- -----------------------------------------------------
 DROP DATABASE IF EXISTS easyinventoryDB;
 CREATE DATABASE easyinventoryDB;
 USE easyinventoryDB;
-- -----------------------------------------------------
-- Table `Employee`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Employee` ;

CREATE TABLE IF NOT EXISTS `Employee` (
  `employee_id` TINYINT ZEROFILL UNSIGNED NOT NULL AUTO_INCREMENT,
  `fullname` VARCHAR(91) GENERATED ALWAYS AS (CONCAT(firstname, ' ', lastname)),
  `firstname` VARCHAR(45) NOT NULL,
  `lastname` VARCHAR(45) NOT NULL,
  `day` TINYINT NOT NULL,
  `month` VARCHAR(10) NOT NULL,
  `year` INT NOT NULL,
  `dob` VARCHAR(15) GENERATED ALWAYS AS (CONCAT(day,'/',month,'/',year)) VIRTUAL,
  PRIMARY KEY (`employee_id`),
  UNIQUE INDEX `employee_id_UNIQUE` (`employee_id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Locations`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Locations` ;

CREATE TABLE IF NOT EXISTS `Locations` (
  `location_number` TINYINT UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT,
  `capacity` INT UNSIGNED NOT NULL,
  `address` VARCHAR(255) GENERATED ALWAYS AS (CONCAT(street,', ',city,', ',state,' ',zipcode )) STORED,
  `city` VARCHAR(45) NOT NULL,
  `street` VARCHAR(45) NOT NULL,
  `zipcode` INT NOT NULL,
  `state` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`location_number`),
  UNIQUE INDEX `location_number_UNIQUE` (`location_number` ASC) VISIBLE,
  UNIQUE INDEX `address_UNIQUE` (`address` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Devices`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Devices` ;

CREATE TABLE IF NOT EXISTS `Devices` (
  `device_id` TINYINT UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT,
  `type` VARCHAR(45) NOT NULL,
  `fk_location` TINYINT UNSIGNED ZEROFILL NULL,
  PRIMARY KEY (`device_id`),
  UNIQUE INDEX `device_id_UNIQUE` (`device_id` ASC) VISIBLE,
  INDEX `devices to location_idx` (`fk_location` ASC) VISIBLE,
  CONSTRAINT `devices to location`
    FOREIGN KEY (`fk_location`)
    REFERENCES `Locations` (`location_number`)
    ON DELETE SET NULL
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `EZI Account`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `EZI Account` ;

CREATE TABLE IF NOT EXISTS `EZI Account` (
  `easy_id` TINYINT UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT,
  `fk_employee` TINYINT UNSIGNED ZEROFILL NOT NULL,
  `password` VARCHAR(26) NOT NULL DEFAULT 'Firstsetup',
  `fk_location` TINYINT UNSIGNED ZEROFILL NULL,
  PRIMARY KEY (`easy_id`),
  UNIQUE INDEX `easy_id_UNIQUE` (`easy_id` ASC) VISIBLE,
  INDEX `employee to account_idx` (`fk_employee` ASC) VISIBLE,
  INDEX `account to location_idx` (`fk_location` ASC) VISIBLE,
  UNIQUE INDEX `fk_employee_UNIQUE` (`fk_employee` ASC) VISIBLE,
  CONSTRAINT `account to employee`
    FOREIGN KEY (`fk_employee`)
    REFERENCES `Employee` (`employee_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `account to location`
    FOREIGN KEY (`fk_location`)
    REFERENCES `Locations` (`location_number`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Manager`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Manager` ;

CREATE TABLE IF NOT EXISTS `Manager` (
  `manager_id` TINYINT UNSIGNED NOT NULL,
  PRIMARY KEY (`manager_id`),
  UNIQUE INDEX `manager_id_UNIQUE` (`manager_id` ASC) VISIBLE,
  CONSTRAINT `manager to account`
    FOREIGN KEY (`manager_id`)
    REFERENCES `EZI Account` (`easy_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Driver`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Driver` ;

CREATE TABLE IF NOT EXISTS `Driver` (
  `driver_id` TINYINT UNSIGNED NOT NULL,
  `license_number` VARCHAR(12) NOT NULL,
  `working` TINYINT(1) NOT NULL,
  PRIMARY KEY (`driver_id`),
  UNIQUE INDEX `driver_id_UNIQUE` (`driver_id` ASC) VISIBLE,
  UNIQUE INDEX `license_number_UNIQUE` (`license_number` ASC) VISIBLE,
  CONSTRAINT `driver to account`
    FOREIGN KEY (`driver_id`)
    REFERENCES `EZI Account` (`easy_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Sender`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Sender` ;

CREATE TABLE IF NOT EXISTS `Sender` (
  `sender_id` TINYINT UNSIGNED NOT NULL,
  PRIMARY KEY (`sender_id`),
  UNIQUE INDEX `sender_id_UNIQUE` (`sender_id` ASC) VISIBLE,
  CONSTRAINT `sender to account`
    FOREIGN KEY (`sender_id`)
    REFERENCES `EZI Account` (`easy_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Vehicle`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Vehicle` ;

CREATE TABLE IF NOT EXISTS `Vehicle` (
  `vehicle_number` TINYINT UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT,
  `license_plate` VARCHAR(7) NOT NULL,
  `fk_location` TINYINT UNSIGNED ZEROFILL NULL,
  UNIQUE INDEX `license_plate_UNIQUE` (`license_plate` ASC) VISIBLE,
  UNIQUE INDEX `vehicle_number_UNIQUE` (`vehicle_number` ASC) VISIBLE,
  PRIMARY KEY (`vehicle_number`),
  INDEX `vehicle to location_idx` (`fk_location` ASC) VISIBLE,
  CONSTRAINT `vehicle to location`
    FOREIGN KEY (`fk_location`)
    REFERENCES `Locations` (`location_number`)
    ON DELETE SET NULL
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Trips`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Trips` ;

CREATE TABLE IF NOT EXISTS `Trips` (
  `trip_id` TINYINT UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT,
  `package_count` TINYINT NOT NULL,
  `distance` TINYINT NOT NULL,
  PRIMARY KEY (`trip_id`),
  UNIQUE INDEX `trip_id_UNIQUE` (`trip_id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Packages`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Packages` ;

CREATE TABLE IF NOT EXISTS `Packages` (
  `package_id` TINYINT UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT,
  `weight` TINYINT UNSIGNED NOT NULL,
  `tracking_number` VARCHAR(40) NULL,
  `deliver_date` VARCHAR(45) GENERATED ALWAYS AS (CONCAT(month,'/',day,'/',year)) VIRTUAL,
  `day` TINYINT UNSIGNED NOT NULL,
  `year` INT UNSIGNED NOT NULL,
  `month` TINYINT UNSIGNED NOT NULL,
  PRIMARY KEY (`package_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Record`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Record` ;

CREATE TABLE IF NOT EXISTS `Record` (
  `fk_trip_id` TINYINT UNSIGNED ZEROFILL NOT NULL,
  `fk_driver_id` TINYINT UNSIGNED ZEROFILL NULL,
  `fk_vehicle_number` TINYINT UNSIGNED ZEROFILL NULL,
  `fk_package` TINYINT UNSIGNED ZEROFILL NOT NULL,
  INDEX `trips to vehicle_idx` (`fk_vehicle_number` ASC) VISIBLE,
  INDEX `trips to package_idx` (`fk_package` ASC) VISIBLE,
  CONSTRAINT `trips to driver`
    FOREIGN KEY (`fk_driver_id`)
    REFERENCES `Driver` (`driver_id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE,
  CONSTRAINT `trips to record`
    FOREIGN KEY (`fk_trip_id`)
    REFERENCES `Trips` (`trip_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `trips to vehicle`
    FOREIGN KEY (`fk_vehicle_number`)
    REFERENCES `Vehicle` (`vehicle_number`)
    ON DELETE SET NULL
    ON UPDATE CASCADE,
  CONSTRAINT `trips to package`
    FOREIGN KEY (`fk_package`)
    REFERENCES `Packages` (`package_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Customer`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Customer` ;

CREATE TABLE IF NOT EXISTS `Customer` (
  `customer_id` TINYINT UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT,
  `customer_name` VARCHAR(91) GENERATED ALWAYS AS (CONCAT(firstname,' ',lastname)) VIRTUAL,
  `firstname` VARCHAR(45) NOT NULL,
  `lastname` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`customer_id`),
  UNIQUE INDEX `customer_id_UNIQUE` (`customer_id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Product`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Product` ;

CREATE TABLE IF NOT EXISTS `Product` (
  `product_id` TINYINT UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT,
  `product_name` VARCHAR(45) NOT NULL,
  `product_descrip` VARCHAR(65) NOT NULL,
  PRIMARY KEY (`product_id`),
  UNIQUE INDEX `product_id_UNIQUE` (`product_id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Purchases`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Purchases` ;

CREATE TABLE IF NOT EXISTS `Purchases` (
  `fk_customer` TINYINT UNSIGNED ZEROFILL NOT NULL,
  `fk_product` TINYINT UNSIGNED ZEROFILL NOT NULL,
  `purchase_id` TINYINT UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT,
  INDEX `purchases to customer_idx` (`fk_customer` ASC) VISIBLE,
  INDEX `purchases to product_idx` (`fk_product` ASC) VISIBLE,
  PRIMARY KEY (`purchase_id`),
  CONSTRAINT `purchases to customer`
    FOREIGN KEY (`fk_customer`)
    REFERENCES `Customer` (`customer_id`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE,
  CONSTRAINT `purchases to product`
    FOREIGN KEY (`fk_product`)
    REFERENCES `Product` (`product_id`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Inventory`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Inventory` ;

CREATE TABLE IF NOT EXISTS `Inventory` (
  `fk_location` TINYINT UNSIGNED ZEROFILL NOT NULL,
  `fk_product` TINYINT UNSIGNED ZEROFILL NOT NULL,
  `quantity` INT UNSIGNED NOT NULL,
  INDEX `inventory to locations_idx` (`fk_location` ASC) VISIBLE,
  INDEX `inventory to product_idx` (`fk_product` ASC) VISIBLE,
  CONSTRAINT `inventory to product`
    FOREIGN KEY (`fk_product`)
    REFERENCES `Product` (`product_id`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE,
  CONSTRAINT `inventory to locations`
    FOREIGN KEY (`fk_location`)
    REFERENCES `Locations` (`location_number`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Suppliers`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Suppliers` ;

CREATE TABLE IF NOT EXISTS `Suppliers` (
  `supplier_id` TINYINT UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT,
  `supplier_name` VARCHAR(45) NOT NULL,
  `address` VARCHAR(150) GENERATED ALWAYS AS (CONCAT(street,' ', city,' ',country)) STORED,
  `street` VARCHAR(45) NOT NULL,
  `city` VARCHAR(45) NOT NULL,
  `country` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`supplier_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Stock`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Stock` ;

CREATE TABLE IF NOT EXISTS `Stock` (
  `stock_id` TINYINT UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT,
  `arrival` VARCHAR(10) GENERATED ALWAYS AS (CONCAT(month,'/',day,'/',year)) VIRTUAL,
  `day` TINYINT UNSIGNED NOT NULL,
  `month` TINYINT UNSIGNED NOT NULL,
  `year` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`stock_id`),
  UNIQUE INDEX `stock_id_UNIQUE` (`stock_id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Supply`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Supply` ;

CREATE TABLE IF NOT EXISTS `Supply` (
  `fk_supplier` TINYINT UNSIGNED ZEROFILL NOT NULL,
  `fk_stock` TINYINT UNSIGNED ZEROFILL NOT NULL,
  INDEX `shipments to suppliers_idx` (`fk_supplier` ASC) VISIBLE,
  INDEX `shipments to stock_idx` (`fk_stock` ASC) VISIBLE,
  CONSTRAINT `supply to suppliers`
    FOREIGN KEY (`fk_supplier`)
    REFERENCES `Suppliers` (`supplier_id`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE,
  CONSTRAINT `supply to stock`
    FOREIGN KEY (`fk_stock`)
    REFERENCES `Stock` (`stock_id`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Shipment`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Shipment` ;

CREATE TABLE IF NOT EXISTS `Shipment` (
  `fk_stock` TINYINT UNSIGNED ZEROFILL NOT NULL,
  `fk_product` TINYINT UNSIGNED ZEROFILL NOT NULL,
  `count` TINYINT NOT NULL,
  INDEX `shipment to stock_idx` (`fk_stock` ASC) VISIBLE,
  INDEX `shipment to purchases_idx` (`fk_product` ASC) VISIBLE,
  CONSTRAINT `shipment to stock`
    FOREIGN KEY (`fk_stock`)
    REFERENCES `Stock` (`stock_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `shipment to product`
    FOREIGN KEY (`fk_product`)
    REFERENCES `Product` (`product_id`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Partners`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Partners` ;

CREATE TABLE IF NOT EXISTS `Partners` (
  `partner_id` TINYINT ZEROFILL UNSIGNED NOT NULL AUTO_INCREMENT,
  `partner_name` VARCHAR(45) NOT NULL,
  `country` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`partner_id`),
  UNIQUE INDEX `partner_id_UNIQUE` (`partner_id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Partner Deliver`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Partner Deliver` ;

CREATE TABLE IF NOT EXISTS `Partner Deliver` (
  `fk_package` TINYINT UNSIGNED ZEROFILL NOT NULL,
  `fk_partner` TINYINT UNSIGNED ZEROFILL NULL,
  INDEX `PD to partners_idx` (`fk_partner` ASC) VISIBLE,
  INDEX `PD to packages_idx` (`fk_package` ASC) VISIBLE,
  CONSTRAINT `PD to partners`
    FOREIGN KEY (`fk_partner`)
    REFERENCES `Partners` (`partner_id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE,
  CONSTRAINT `PD to packages`
    FOREIGN KEY (`fk_package`)
    REFERENCES `Packages` (`package_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Content`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Content` ;

CREATE TABLE IF NOT EXISTS `Content` (
  `fk_product` TINYINT UNSIGNED ZEROFILL NOT NULL,
  `fk_package` TINYINT UNSIGNED ZEROFILL NOT NULL,
  `count` TINYINT NOT NULL,
  INDEX `content to product_idx` (`fk_product` ASC) VISIBLE,
  INDEX `content to supply_idx` (`fk_package` ASC) VISIBLE,
  CONSTRAINT `content to packages`
    FOREIGN KEY (`fk_package`)
    REFERENCES `Packages` (`package_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `content to product`
    FOREIGN KEY (`fk_product`)
    REFERENCES `Product` (`product_id`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Orders`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Orders` ;

CREATE TABLE IF NOT EXISTS `Orders` (
  `order_id` TINYINT UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT,
  `fk_location` TINYINT UNSIGNED ZEROFILL NULL,
  `fk_product` TINYINT UNSIGNED ZEROFILL NOT NULL,
  `fk_manager` TINYINT UNSIGNED ZEROFILL NOT NULL,
  `fk_supplier` TINYINT UNSIGNED ZEROFILL NOT NULL,
  PRIMARY KEY (`order_id`),
  INDEX `orders to manager_idx` (`fk_manager` ASC) VISIBLE,
  INDEX `orders to location_idx` (`fk_location` ASC) VISIBLE,
  INDEX `orders to supplier_idx` (`fk_supplier` ASC) VISIBLE,
  INDEX `orders to stock_idx` (`fk_product` ASC) VISIBLE,
  UNIQUE INDEX `order_id_UNIQUE` (`order_id` ASC) VISIBLE,
  CONSTRAINT `orders to manager`
    FOREIGN KEY (`fk_manager`)
    REFERENCES `Manager` (`manager_id`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE,
  CONSTRAINT `orders to location`
    FOREIGN KEY (`fk_location`)
    REFERENCES `Locations` (`location_number`)
    ON DELETE SET NULL
    ON UPDATE CASCADE,
  CONSTRAINT `orders to stock`
    FOREIGN KEY (`fk_product`)
    REFERENCES `Product` (`product_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `orders to supplier`
    FOREIGN KEY (`fk_supplier`)
    REFERENCES `Suppliers` (`supplier_id`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Confirmation`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Confirmation` ;

CREATE TABLE IF NOT EXISTS `Confirmation` (
  `confirm_id` TINYINT UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT,
  `store_ready` TINYINT NOT NULL,
  `fk_purchase` TINYINT UNSIGNED ZEROFILL NOT NULL,
  `ready_date` VARCHAR(5) GENERATED ALWAYS AS (CONCAT(month,'/',day)),
  `day` TINYINT UNSIGNED NOT NULL,
  `month` TINYINT UNSIGNED NOT NULL,
  `fk_sender` TINYINT UNSIGNED ZEROFILL NOT NULL,
  UNIQUE INDEX `purchase_id_UNIQUE` (`fk_purchase` ASC) VISIBLE,
  INDEX `confirmation to sender_idx` (`fk_sender` ASC) VISIBLE,
  PRIMARY KEY (`confirm_id`),
  UNIQUE INDEX `confirm_id_UNIQUE` (`confirm_id` ASC) VISIBLE,
  CONSTRAINT `confirmation to purchase`
    FOREIGN KEY (`fk_purchase`)
    REFERENCES `Purchases` (`purchase_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `confirmation to sender`
    FOREIGN KEY (`fk_sender`)
    REFERENCES `Sender` (`sender_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Requests`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Requests` ;

CREATE TABLE IF NOT EXISTS `Requests` (
  `request_id` TINYINT UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT,
  `fk_product` TINYINT UNSIGNED ZEROFILL NOT NULL,
  `fk_sender` TINYINT UNSIGNED ZEROFILL NOT NULL,
  `count` TINYINT NOT NULL,
  PRIMARY KEY (`request_id`),
  UNIQUE INDEX `request_id_UNIQUE` (`request_id` ASC) VISIBLE,
  INDEX `request to product_idx` (`fk_product` ASC) VISIBLE,
  INDEX `requests to sender_idx` (`fk_sender` ASC) VISIBLE,
  CONSTRAINT `requests to sender`
    FOREIGN KEY (`fk_sender`)
    REFERENCES `Sender` (`sender_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `request to product`
    FOREIGN KEY (`fk_product`)
    REFERENCES `Product` (`product_id`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Tables`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Tables` ;

CREATE TABLE IF NOT EXISTS `Tables` (
  `table_id` TINYINT UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT,
  `table_name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`table_id`),
  UNIQUE INDEX `table_id_UNIQUE` (`table_id` ASC) VISIBLE,
  UNIQUE INDEX `table_name_UNIQUE` (`table_name` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Permissions`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Permissions` ;

CREATE TABLE IF NOT EXISTS `Permissions` (
  `fk_table` TINYINT UNSIGNED NOT NULL,
  `permission_level` TINYINT UNSIGNED ZEROFILL NOT NULL DEFAULT 0,
  `fk_ezi_account` TINYINT UNSIGNED ZEROFILL NOT NULL,
  INDEX `pwemission to table_idx` (`fk_table` ASC) VISIBLE,
  CONSTRAINT `permission to ezi`
    FOREIGN KEY (`fk_ezi_account`)
    REFERENCES `EZI Account` (`easy_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `pwemission to table`
    FOREIGN KEY (`fk_table`)
    REFERENCES `Tables` (`table_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

DELIMITER $$

CREATE TRIGGER createAccount AFTER INSERT ON `Employee`
FOR EACH ROW
BEGIN
	DECLARE tempID TINYINT;
	SELECT employee_id INTO tempID FROM `employee` WHERE employee_id = NEW.employee_id;
	INSERT INTO `easyinventoryDB`.`EZI Account` (`fk_employee`) VALUES (tempID);
END$$


CREATE TRIGGER createPermissionS AFTER INSERT ON `Sender`
FOR EACH ROW
BEGIN
	DECLARE tempID TINYINT;
    DECLARE tableID TINYINT;
    DECLARE table2ID TINYINT;
    SELECT sender_id INTO tempID FROM `sender` WHERE sender_id = NEW.sender_id;
	SELECT table_id INTO tableID FROM `tables` WHERE table_name = "confirmation";
    SELECT table_id INTO table2ID FROM `tables` WHERE table_name = "requests";
    INSERT INTO `easyinventoryDB`.`permissions` (`fk_ezi_account`, `permission_level`, `fk_table`) VALUES (tempID, 1, tableID);
    INSERT INTO `easyinventoryDB`.`permissions` (`fk_ezi_account`, `permission_level`, `fk_table`) VALUES (tempID, 1, table2ID);
END$$


CREATE TRIGGER fixPermissionS BEFORE DELETE ON `Sender`
FOR EACH ROW
BEGIN
	DECLARE tempID TINYINT;
    SELECT sender_id INTO tempID FROM `sender` WHERE sender_id = OLD.sender_id;
    DELETE FROM `easyinventoryDB`.`permissions` WHERE fk_ezi_account = tempID;
END$$


CREATE TRIGGER createPermissionD AFTER INSERT ON `Driver`
FOR EACH ROW
BEGIN
	DECLARE tempID TINYINT;
    DECLARE tableID TINYINT;
    DECLARE table2ID TINYINT;
    DECLARE table3ID TINYINT;
    DECLARE table4ID TINYINT;
    SELECT driver_id INTO tempID FROM `driver` WHERE driver_id = NEW.driver_id;
	SELECT table_id INTO tableID FROM `tables` WHERE table_name = "trips";
    SELECT table_id INTO table2ID FROM `tables` WHERE table_name = "vehicle";
    SELECT table_id INTO table3ID FROM `tables` WHERE table_name = "packages";
    SELECT table_id INTO table4ID FROM `tables` WHERE table_name = "record";
    INSERT INTO `easyinventoryDB`.`permissions` (`fk_ezi_account`, `permission_level`, `fk_table`) VALUES (tempID, 0, tableID);
    INSERT INTO `easyinventoryDB`.`permissions` (`fk_ezi_account`, `permission_level`, `fk_table`) VALUES (tempID, 0, table2ID);
    INSERT INTO `easyinventoryDB`.`permissions` (`fk_ezi_account`, `permission_level`, `fk_table`) VALUES (tempID, 0, table3ID);
    INSERT INTO `easyinventoryDB`.`permissions` (`fk_ezi_account`, `permission_level`, `fk_table`) VALUES (tempID, 0, table4ID);
END$$


CREATE TRIGGER fixPermissionD BEFORE DELETE ON `Driver`
FOR EACH ROW
BEGIN
	DECLARE tempID TINYINT;
    SELECT driver_id INTO tempID FROM `driver` WHERE driver_id = OLD.driver_id;
    DELETE FROM `easyinventoryDB`.`permissions` WHERE fk_ezi_account = tempID;
END$$


CREATE TRIGGER createPermissionM AFTER INSERT ON `Manager`
FOR EACH ROW
BEGIN
	DECLARE tempID TINYINT;
    DECLARE tableID TINYINT;
    DECLARE table2ID TINYINT;
    DECLARE table3ID TINYINT;
    DECLARE table4ID TINYINT;
    DECLARE table5ID TINYINT;
    DECLARE table6ID TINYINT;
    DECLARE table7ID TINYINT;
    DECLARE table8ID TINYINT;
    DECLARE table9ID TINYINT;
	SELECT manager_id INTO tempID FROM `manager` WHERE manager_id = NEW.manager_id;
	SELECT table_id INTO tableID FROM `tables` WHERE table_name = "trips";
    SELECT table_id INTO table2ID FROM `tables` WHERE table_name = "vehicle";
    SELECT table_id INTO table3ID FROM `tables` WHERE table_name = "packages";
    SELECT table_id INTO table4ID FROM `tables` WHERE table_name = "confirmation";
    SELECT table_id INTO table5ID FROM `tables` WHERE table_name = "requests";
    SELECT table_id INTO table6ID FROM `tables` WHERE table_name = "orders";
    SELECT table_id INTO table7ID FROM `tables` WHERE table_name = "sender";
    SELECT table_id INTO table8ID FROM `tables` WHERE table_name = "driver";
    SELECT table_id INTO table9ID FROM `tables` WHERE table_name = "manager";
    INSERT INTO `easyinventoryDB`.`permissions` (`fk_ezi_account`, `permission_level`, `fk_table`) VALUES (tempID, 9, tableID);
    INSERT INTO `easyinventoryDB`.`permissions` (`fk_ezi_account`, `permission_level`, `fk_table`) VALUES (tempID, 9, table2ID);
    INSERT INTO `easyinventoryDB`.`permissions` (`fk_ezi_account`, `permission_level`, `fk_table`) VALUES (tempID, 9, table3ID);
    INSERT INTO `easyinventoryDB`.`permissions` (`fk_ezi_account`, `permission_level`, `fk_table`) VALUES (tempID, 9, table4ID);
    INSERT INTO `easyinventoryDB`.`permissions` (`fk_ezi_account`, `permission_level`, `fk_table`) VALUES (tempID, 9, table5ID);
    INSERT INTO `easyinventoryDB`.`permissions` (`fk_ezi_account`, `permission_level`, `fk_table`) VALUES (tempID, 9, table6ID);
    INSERT INTO `easyinventoryDB`.`permissions` (`fk_ezi_account`, `permission_level`, `fk_table`) VALUES (tempID, 9, table7ID);
    INSERT INTO `easyinventoryDB`.`permissions` (`fk_ezi_account`, `permission_level`, `fk_table`) VALUES (tempID, 9, table8ID);
    INSERT INTO `easyinventoryDB`.`permissions` (`fk_ezi_account`, `permission_level`, `fk_table`) VALUES (tempID, 9, table9ID);
END$$


CREATE TRIGGER fixPermissionM BEFORE DELETE ON `Manager`
FOR EACH ROW
BEGIN
	DECLARE tempID TINYINT;
    SELECT manager_id INTO tempID FROM `manager` WHERE manager_id = OLD.manager_id;
    DELETE FROM `easyinventoryDB`.`permissions` WHERE fk_ezi_account = tempID;
END$$


CREATE TRIGGER createShip AFTER INSERT ON `orders`
FOR EACH ROW
BEGIN
	DECLARE tempID TINYINT;
    DECLARE temp2ID TINYINT;
    DECLARE temp3ID TINYINT;
    DECLARE temp4ID TINYINT;
    DECLARE amount TINYINT;
    SET amount = (FLOOR(4 + RAND()*25));
	SELECT fk_supplier INTO tempID FROM `orders` WHERE order_id = NEW.order_id;
    SELECT fk_product INTO temp2ID FROM `orders` WHERE order_id = NEW.order_id;
    SELECT fk_location INTO temp4ID FROM `orders` WHERE order_id = NEW.order_id;
	INSERT INTO `easyinventoryDB`.`stock` (`day`, `month`, `year`) VALUES ((Floor(1 + RAND()*30)),(FLOOR(4 + RAND()*12)),(FLOOR(2021+ RAND()*2))); 
    SELECT last_insert_id() INTO temp3ID;
    -- SELECT stock_id INTO temp3ID FROM `easyinventoryDB`.`stock` WHERE stock_id = NEW.stock_id;
    INSERT INTO `easyinventoryDB`.`supply` (`fk_supplier`, `fk_stock`) VALUES (tempID, temp3ID);
    INSERT INTO `easyinventoryDB`.`shipment` (`fk_stock`, `fk_product`, `count`) VALUES (temp3ID, temp2ID, amount);
    INSERT INTO `easyinventoryDB`.`inventory` (`fk_location`, `fk_product`, `quantity`) VALUES (temp4ID, temp2ID, amount);
END$$


 CREATE TRIGGER createChain AFTER INSERT ON `Purchases`
 FOR EACH ROW
 BEGIN
 	DECLARE tempID TINYINT;
    DECLARE temp2ID TINYINT;
    DECLARE temp3ID TINYINT;
    DECLARE temp4ID TINYINT;
    DECLARE temp5ID TINYINT;
    DECLARE tracking VARCHAR(40);
    DECLARE amount TINYINT;
    SET amount = (FLOOR(2 + RAND()*20));
	IF (RAND() < 0.5) THEN															-- there is a chance this fails at being unique
		SET tracking = CONCAT("468219", FLOOR(3 + RAND()*20), "CO", FLOOR(1+RAND()*50));
	ELSE
		SET tracking = CONCAT("PD", FLOOR(5 + RAND()*62), "5134", FLOOR(3 + RAND()*746));
	END IF;
	SELECT purchase_id INTO tempID FROM `purchases` WHERE purchase_id = NEW.purchase_id;
    SELECT fk_product INTO temp2ID FROM `purchases` WHERE purchase_id = NEW.purchase_id;
    SELECT sender_id INTO temp3ID FROM `sender` ORDER BY RAND() LIMIT 1; 
    INSERT INTO `easyinventoryDB`.`requests` (`fk_product`, `fk_sender`, `count`) VALUES (temp2ID, temp3ID, amount);
    INSERT INTO `easyinventoryDB`.`confirmation` (`fk_purchase`, `fk_sender`, `day`, `month`, `store_ready`) VALUES (tempID, temp3ID, (FLOOR(2 + RAND()*30)), (FLOOR(4 + RAND()*12)), false);
    INSERT INTO `easyinventoryDB`.`packages` (`weight`, `day`, `month`, `year`, `tracking_number`) VALUES (amount*2, (Floor(1 + RAND()*30)),(FLOOR(4 + RAND()*12)),(FLOOR(2021+ RAND()*2)), tracking);
	SELECT last_insert_id() INTO temp4ID;
    IF (tracking LIKE "%PD%") THEN
		SELECT partner_id INTO temp5ID FROM `partners` ORDER BY RAND() LIMIT 1;
		INSERT INTO `easyinventoryDB`.`partner deliver` (`fk_partner`, `fk_package`) VALUES (temp5ID, temp4ID);
	END IF;
    INSERT INTO `easyinventoryDB`.`content` (`fk_product`,`fk_package`,`count`) VALUES (temp2ID, temp4ID, amount);
 END$$


CREATE TRIGGER makeRecord AFTER INSERT ON `trips`
FOR EACH ROW
BEGIN
	DECLARE tempID TINYINT;
    DECLARE temp2ID TINYINT;
    DECLARE temp3ID TINYINT;
    DECLARE temp4ID TINYINT;
    DECLARE count TINYINT;
    DECLARE x TINYINT;
    SET x = 0;
    SELECT trip_id INTO tempID FROM `easyinventoryDB`.`trips` WHERE trip_id = NEW.trip_id;
    SELECT package_count INTO count FROM `easyinventoryDB`.`trips` WHERE trip_id = new.trip_id;
    SELECT driver_id INTO temp2ID FROM `easyinventoryDB`.`driver` WHERE working = FALSE ORDER BY RAND() LIMIT 1;
    SELECT vehicle_number INTO temp3ID FROM `easyinventoryDB`.`vehicle` WHERE fk_location IS NOT NULL ORDER BY RAND() LIMIT 1;
    WHILE (x < count) DO
		SELECT package_id INTO temp4ID FROM `easyinventoryDB`.`packages` WHERE package_id NOT IN (SELECT fk_package FROM record) LIMIT 1;
        INSERT INTO `easyinventoryDB`.`record` (`fk_package`,`fk_vehicle_number`,`fk_driver_id`,`fk_trip_id`) VALUES (temp4ID, temp3ID, temp2ID, tempID);
        SET x = x+1;
	END WHILE;
    UPDATE `easyinventoryDB`.`driver` SET working = true  WHERE driver_id = temp2ID;
    UPDATE `easyinventoryDB`.`vehicle` SET fk_location = NULL WHERE vehicle_number = temp3ID; 
END$$

CREATE PROCEDURE longestTrip(OUT trip_length TINYINT)
BEGIN
    SET trip_length = (SELECT max(distance) FROM trips);
END$$

CREATE FUNCTION supplierAvgShip(supplierID TINYINT)
RETURNS TINYINT
DETERMINISTIC
BEGIN
DECLARE shipAvg TINYINT;
	set shipAvg = (SELECT avg(ship.count) FROM shipment ship
					JOIN Stock stock ON stock.stock_id = fk_stock
					JOIN Supply supply ON supply.fk_stock = stock.stock_id
					JOIN Suppliers supplier ON supplier.supplier_id = fk_supplier 
					WHERE fk_supplier = supplierID);
    return shipAvg;
END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
